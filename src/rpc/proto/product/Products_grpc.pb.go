// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ProductSercice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	QueryProdInfoDetail(ctx context.Context, in *ProdctInfo, opts ...grpc.CallOption) (*Response, error)
	// 查询大量信息 使用流模式 分批发送
	QueryBatchProdInfoDetail(ctx context.Context, in *ProdctInfo, opts ...grpc.CallOption) (ProductService_QueryBatchProdInfoDetailClient, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

var productServiceQueryProdInfoDetailStreamDesc = &grpc.StreamDesc{
	StreamName: "QueryProdInfoDetail",
}

func (c *productServiceClient) QueryProdInfoDetail(ctx context.Context, in *ProdctInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.product.ProductService/QueryProdInfoDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var productServiceQueryBatchProdInfoDetailStreamDesc = &grpc.StreamDesc{
	StreamName:    "QueryBatchProdInfoDetail",
	ServerStreams: true,
}

func (c *productServiceClient) QueryBatchProdInfoDetail(ctx context.Context, in *ProdctInfo, opts ...grpc.CallOption) (ProductService_QueryBatchProdInfoDetailClient, error) {
	stream, err := c.cc.NewStream(ctx, productServiceQueryBatchProdInfoDetailStreamDesc, "/rpc.product.ProductService/QueryBatchProdInfoDetail", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceQueryBatchProdInfoDetailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_QueryBatchProdInfoDetailClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type productServiceQueryBatchProdInfoDetailClient struct {
	grpc.ClientStream
}

func (x *productServiceQueryBatchProdInfoDetailClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServiceService is the service API for ProductService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterProductServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ProductServiceService struct {
	QueryProdInfoDetail func(context.Context, *ProdctInfo) (*Response, error)
	// 查询大量信息 使用流模式 分批发送
	QueryBatchProdInfoDetail func(*ProdctInfo, ProductService_QueryBatchProdInfoDetailServer) error
}

func (s *ProductServiceService) queryProdInfoDetail(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdctInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.QueryProdInfoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/rpc.product.ProductService/QueryProdInfoDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.QueryProdInfoDetail(ctx, req.(*ProdctInfo))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ProductServiceService) queryBatchProdInfoDetail(_ interface{}, stream grpc.ServerStream) error {
	m := new(ProdctInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.QueryBatchProdInfoDetail(m, &productServiceQueryBatchProdInfoDetailServer{stream})
}

type ProductService_QueryBatchProdInfoDetailServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type productServiceQueryBatchProdInfoDetailServer struct {
	grpc.ServerStream
}

func (x *productServiceQueryBatchProdInfoDetailServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterProductServiceService registers a service implementation with a gRPC server.
func RegisterProductServiceService(s grpc.ServiceRegistrar, srv *ProductServiceService) {
	srvCopy := *srv
	if srvCopy.QueryProdInfoDetail == nil {
		srvCopy.QueryProdInfoDetail = func(context.Context, *ProdctInfo) (*Response, error) {
			return nil, status.Errorf(codes.Unimplemented, "method QueryProdInfoDetail not implemented")
		}
	}
	if srvCopy.QueryBatchProdInfoDetail == nil {
		srvCopy.QueryBatchProdInfoDetail = func(*ProdctInfo, ProductService_QueryBatchProdInfoDetailServer) error {
			return status.Errorf(codes.Unimplemented, "method QueryBatchProdInfoDetail not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "rpc.product.ProductService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "QueryProdInfoDetail",
				Handler:    srvCopy.queryProdInfoDetail,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "QueryBatchProdInfoDetail",
				Handler:       srvCopy.queryBatchProdInfoDetail,
				ServerStreams: true,
			},
		},
		Metadata: "Products.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewProductServiceService creates a new ProductServiceService containing the
// implemented methods of the ProductService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewProductServiceService(s interface{}) *ProductServiceService {
	ns := &ProductServiceService{}
	if h, ok := s.(interface {
		QueryProdInfoDetail(context.Context, *ProdctInfo) (*Response, error)
	}); ok {
		ns.QueryProdInfoDetail = h.QueryProdInfoDetail
	}
	if h, ok := s.(interface {
		QueryBatchProdInfoDetail(*ProdctInfo, ProductService_QueryBatchProdInfoDetailServer) error
	}); ok {
		ns.QueryBatchProdInfoDetail = h.QueryBatchProdInfoDetail
	}
	return ns
}

// UnstableProductServiceService is the service API for ProductService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableProductServiceService interface {
	QueryProdInfoDetail(context.Context, *ProdctInfo) (*Response, error)
	// 查询大量信息 使用流模式 分批发送
	QueryBatchProdInfoDetail(*ProdctInfo, ProductService_QueryBatchProdInfoDetailServer) error
}
